{"version":3,"sources":["Hangman.js","AlphaButtons.js","Gameboard.js","App.js","index.js"],"names":["Hangman","className","viewBox","xmlns","id","cx","cy","r","fill","stroke","x1","y1","x2","y2","Component","AlphaButtons","props","handleClick","bind","e","this","pressKey","value","onClick","Gameboard","state","currentWord","mysteryWord","splitWord","toLowerCase","split","bodyParts","status","resetBoard","generateNewWord","enableButtons","map","part","document","getElementById","style","opacity","tiles","getElementsByClassName","i","length","removeAttribute","getAttribute","innerText","randWord","wordList","Math","floor","random","setState","buttons","setAttribute","tilesArr","wonTiles","filter","tile","existingTiles","disableButtons","key","t","forEach","item","hasWon","newBody","n","revealWord","push","some","showTile","loseTurn","l","characters","c","defaultProps","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.208308a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Hangman.css'\n\nclass Hangman extends Component {\n  render(){\n    return(\n      <div className=\"Hangman\">\n        <svg className=\"Hangman--man-container\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <circle id=\"head\" cx=\"45\" cy=\"20\" r=\"10\" fill=\"#FFFFFF\" stroke=\"#212121\" />\n          <line id=\"body\" x1=\"45\" y1=\"30\" x2=\"45\" y2=\"80\" stroke=\"#212121\" />\n          <line id=\"arm-r\" x1=\"45\" y1=\"45\" x2=\"60\" y2=\"65\" stroke=\"#212121\" />\n          <line id=\"arm-l\" x1=\"45\" y1=\"45\" x2=\"30\" y2=\"65\" stroke=\"#212121\" />\n          <line id=\"leg-r\" x1=\"45\" y1=\"80\" x2=\"55\" y2=\"100\" stroke=\"#212121\" />\n          <line id=\"leg-l\" x1=\"45\" y1=\"80\" x2=\"35\" y2=\"100\" stroke=\"#212121\" />\n        </svg>\n      </div>\n    )\n  }\n}\n\nexport default Hangman;\n","import React, { Component } from 'react';\nimport './AlphaButtons.css'\n\nclass AlphaButtons extends Component {\n  constructor(props){\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(e){\n    this.props.pressKey(this.props.value)\n  }\n  render(){\n    return(\n        <button className=\"AlphaButtons--button\"\n        id={this.props.id}\n        value={this.props.value} onClick={this.handleClick}>{this.props.value}</button>\n    )\n  }\n}\n\nexport default AlphaButtons;\n","import React, {\n  Component\n} from 'react';\nimport './Gameboard.css';\nimport Hangman from './Hangman.js';\nimport AlphaButtons from './AlphaButtons.js';\n\nclass Gameboard extends Component {\n  static defaultProps = {\n    characters: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n    mysteryWord: 'New Car',\n    bodyParts: ['head', 'body', 'arm-l', 'arm-r', 'leg-l', 'leg-r'],\n    wordList: ['apple', 'tree house', 'vacation', 'nope rope', 'weather', 'pizza place', 'nice view']\n  }\n  state = {\n    currentWord: this.props.mysteryWord,\n    splitWord: this.props.mysteryWord.toLowerCase().split(''),\n    bodyParts: this.props.bodyParts,\n    status: 'in-progress'\n  }\n\n  constructor(props) {\n    super(props);\n    this.pressKey = this.pressKey.bind(this);\n    this.resetBoard = this.resetBoard.bind(this);\n    this.generateNewWord = this.generateNewWord.bind(this);\n    this.enableButtons = this.enableButtons.bind(this);\n  }\n\n  resetBoard() {\n    this.generateNewWord()\n    this.enableButtons()\n    this.state.bodyParts.map(part => {\n      document.getElementById(part).style.opacity = 0;\n    })\n\n  }\n\n  generateNewWord(){\n    let tiles = document.getElementsByClassName('Gameboard--single-tile');\n    for(let i = 0; i < tiles.length; i++){\n      tiles[i].removeAttribute('visible')\n      if(tiles[i].getAttribute('value') !== ' '){\n        tiles[i].innerText = '_';\n      }\n    }\n    let randWord =  this.props.wordList[Math.floor(Math.random()* this.props.wordList.length)];\n    this.setState({\n      currentWord: randWord,\n      splitWord: randWord.toLowerCase().split(''),\n      status: 'in-progress',\n      bodyParts: this.props.bodyParts\n    })\n  }\n\n  enableButtons() {\n    let buttons = document.getElementsByClassName('AlphaButtons--button');\n    for (let i = 0; i < buttons.length; i++) {\n      buttons[i].removeAttribute('disabled')\n    }\n  }\n\n  disableButtons() {\n      let buttons = document.getElementsByClassName('AlphaButtons--button');\n      for (let i = 0; i < buttons.length; i++) {\n        buttons[i].setAttribute('disabled', true)\n      }\n  }\n\n  hasWon(tilesArr){\n    let wonTiles = tilesArr.filter(tile => tile.getAttribute('visible') === 'true')\n    let existingTiles = tilesArr.filter(tile => tile.getAttribute('value') !== ' ');\n    if(wonTiles.length === existingTiles.length){\n      this.setState({status: 'won'})\n      this.disableButtons()\n    }\n  }\n\n  showTile(tilesArr, key){\n    let idx = tilesArr.filter(function(t, i){\n       return t.getAttribute('value') === key\n      })\n      idx.forEach(function(item){\n        item.innerText = key;\n        item.setAttribute('visible', true)\n      })\n\n      this.hasWon(tilesArr)\n  }\n\n  revealWord() {\n    let tiles = document.getElementsByClassName('Gameboard--single-tile');\n    for(let i = 0; i < tiles.length; i++){\n      tiles[i].setAttribute('visible', true)\n      if(tiles[i].getAttribute('value') !== ' '){\n        tiles[i].innerText = tiles[i].getAttribute('value');\n      }\n    }\n  }\n\n  loseTurn(tilesArr, key){\n    if (this.state.bodyParts.length > 0) {\n      document.getElementById(this.state.bodyParts[0]).style.opacity = 1;\n      let newBody = this.state.bodyParts.filter((n, i) => {\n        return (i !== 0) ? n : null;\n      })\n      this.setState({\n        bodyParts: newBody\n      })\n      if (this.state.bodyParts.length <= 1) {\n        this.revealWord()\n        this.disableButtons()\n        this.setState({\n          status: 'lost',\n          bodyParts: this.props.bodyParts\n        })\n      }\n    }\n  }\n\n  pressKey(key) {\n    document.getElementById(key).setAttribute('disabled', true)\n    let tiles = document.getElementsByClassName('Gameboard--single-tile');\n    let tilesArr = [];\n    for (let i = 0; i < tiles.length; i++) {\n      tilesArr.push(tiles[i]);\n    }\n    if (tilesArr.some(t => { return t.getAttribute('value') === key})) {\n      this.showTile(tilesArr, key);\n    } else {\n      this.loseTurn(tilesArr, key)\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"Gameboard--title\">{this.state.status === 'lost' ? 'Better Luck Next Time!' : this.state.status === 'won' ? 'Congrats, you won!' : 'Lets Play Hangman'}</h1>\n        <button onClick={this.resetBoard} className=\"Gameboard--reset\">Play again</button>\n      <div className = \"Gameboard\">\n      <Hangman />\n      <div className=\"Gameboard--text-container\">\n          <div className = \"Gameboard--blank-tiles\" >\n            {this.state.splitWord.map((l, i) => {\n              return <span className = \"Gameboard--single-tile\"\n              value = { l }\n              key = {\n                'board-' + l + i\n              } > {\n                (l !== ' ' ? '_' : ' ')\n              } </span>\n            })\n          }\n        </div>\n          <div className = \"AlphaButtons\">\n            {this.props.characters.map((c, i) => {\n              return <AlphaButtons\n              characters = {this.props.characters}\n              value = {c}\n              id = {c}\n              key = {c + i}\n              pressKey = {this.pressKey}\n              />\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default Gameboard;\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './Gameboard.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}